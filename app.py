import streamlit as st
import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import torch
import os
import google.generativeai as genai
from osteoporosis import OsteoporosisEarlyDetectionSystem, IMG_SIZE
from matplotlib.patches import Rectangle

# Page configuration
st.set_page_config(page_title="Osteoporosis Diagnosis", layout="wide")

# Title and description
st.title("ü¶¥ Osteoporosis Detection & Report Generator")
st.markdown("""
This application uses AI to analyze X-ray images for early signs of osteoporosis. Upload an X-ray image to receive a detailed risk assessment, visualizations (including Grad-CAM heatmap), and a professional report generated by Gemini AI.
""")

# Check for model file
MODEL_PATH = "best_osteoporosis_model.pth"
if not os.path.exists(MODEL_PATH):
    st.error(f"Model file '{MODEL_PATH}' not found. Please ensure it is in the app directory.")
    st.stop()

# Initialize the system
try:
    system = OsteoporosisEarlyDetectionSystem(MODEL_PATH)
except Exception as e:
    st.error(f"Failed to initialize the osteoporosis detection system: {str(e)}")
    st.stop()

# Configure Gemini API with hardcoded key
try:
    API_KEY = "AIzaSyBDxhCw6eCS6staVFARHK9XMubRm3lUJWE"
    genai.configure(api_key=API_KEY)
    gemini_model = genai.GenerativeModel("models/gemini-1.5-flash")
except Exception as e:
    st.error(f"Failed to configure Gemini API: {str(e)}")
    st.info("Report generation may not work. Please ensure the API key is valid and you have an active internet connection.")
    gemini_model = None

# File uploader
uploaded_file = st.file_uploader("üì§ Upload X-ray image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    # Read and process the image
    try:
        img = Image.open(uploaded_file).convert("L")  # Convert to grayscale
        img_array = np.array(img)
        if img_array.size == 0:
            raise ValueError("Invalid image: Empty or corrupted file.")
        img_array = cv2.resize(img_array, IMG_SIZE)
    except Exception as e:
        st.error(f"Error processing image: {str(e)}")
        st.stop()

    # Display uploaded image
    st.subheader("Uploaded X-ray Image")
    st.image(img_array, caption="Uploaded X-ray", use_column_width=True, clamp=True)

    # Analyze button
    if st.button("üîç Analyze & Generate Report"):
        with st.spinner("Analyzing X-ray and generating report..."):
            # Run analysis
            try:
                results = system.comprehensive_osteoporosis_analysis(img_array)
            except Exception as e:
                st.error(f"Analysis failed: {str(e)}")
                st.stop()

            # Display results
            st.subheader("üî¢ Analysis Results")
            overall_risk = results["overall_risk"]
            st.write(f"**Overall Risk**: {overall_risk['combined_category']} (Score: {overall_risk['combined_score']:.2f})")
            st.write(f"**Primary Concerns**: {', '.join(overall_risk['primary_concerns']) if overall_risk['primary_concerns'] else 'None'}")

            # Detailed findings
            with st.expander("Detailed Findings"):
                factors = [
                    ("Cortical Thinning", results["cortical_thinning"]["risk_score"]),
                    ("Trabecular Degradation", results["trabecular_degradation"]["risk_score"]),
                    ("Radiolucency", results["radiolucency"]["risk_score"]),
                    ("Compression Fractures", results["compression_fractures"]["risk_score"]),
                    ("Endplate Irregularities", results["endplate_irregularities"]["risk_score"]),
                    ("Geometry Alterations", results["geometry_alterations"]["risk_score"]),
                ]
                for factor, score in factors:
                    st.write(f"- **{factor}**: {score:.2f}")

            # Prediction breakdown
            with st.expander("Prediction Breakdown"):
                st.write(f"- **Feature-Based**: {overall_risk['feature_based_category']} (Score: {overall_risk['feature_based_score']:.2f})")
                st.write(f"- **Model-Based**: {overall_risk['model_category']} (Score: {overall_risk['model_score']:.2f})")
                st.write(f"- **Combined**: {overall_risk['combined_category']} (Score: {overall_risk['combined_score']:.2f})")

            # Visualizations
            st.subheader("üß† Visual Insights")
            try:
                # Main visualizations
                fig = system.visualize_analysis(img_array, results)
                st.pyplot(fig)

                # Grad-CAM heatmap
                gradcam_fig = system._generate_streamlit_gradcam_heatmap(img_array, results)
                if gradcam_fig:
                    st.pyplot(gradcam_fig)
                else:
                    st.warning("Failed to generate Grad-CAM heatmap. Displaying other visualizations only.")
            except Exception as e:
                st.warning(f"Visualization error: {str(e)}. Some visualizations may not be displayed.")

            # Generate and display report
            st.subheader("üìÑ AI-Generated Report")
            if gemini_model:
                with st.spinner("Generating report..."):
                    try:
                        report = system.generate_osteoporosis_report(results)
                        st.text_area("Detailed Report", value=report, height=400)
                    except Exception as e:
                        st.error(f"Report generation failed: {str(e)}")
                        st.info("Please verify the Gemini API key and ensure you have an active internet connection.")
            else:
                st.warning("Report generation is disabled due to missing Gemini API configuration.")

else:
    st.info("Please upload an X-ray image to begin the analysis.")